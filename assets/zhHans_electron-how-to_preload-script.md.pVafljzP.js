import{_ as o,c as t,o as r,ag as a}from"./chunks/framework.BgId8OS5.js";const h=JSON.parse('{"title":"预加载脚本","description":"","frontmatter":{},"headers":[],"relativePath":"zhHans/electron-how-to/preload-script.md","filePath":"zhHans/electron-how-to/preload-script.md","lastUpdated":1735005729000}'),d={name:"zhHans/electron-how-to/preload-script.md"};function c(n,e,l,i,s,p){return r(),t("div",null,e[0]||(e[0]=[a('<h1 id="预加载脚本" tabindex="-1">预加载脚本 <a class="header-anchor" href="#预加载脚本" aria-label="Permalink to &quot;预加载脚本&quot;">​</a></h1><p>Electron.js中的预加载脚本是一个安全区域，用于主进程和渲染器进程之间的通信。它通常用于 <strong><a href="https://www.electronjs.org/docs/latest/tutorial/ipc" target="_blank" rel="noreferrer">IPC通信</a></strong>。</p><p>更多信息，请参阅以下文章: <a href="https://www.electronjs.org/docs/latest/tutorial/tutorial-preload" target="_blank" rel="noreferrer">https://www.electronjs.org/docs/latest/tutorial/tutorial-preload</a></p><p>为了与最新版本的Electron兼容并确保安全，我们不建议使用旧的<code>electron/remote</code>模块。如果您想使用系统事件或Node脚本，建议在主进程中使用，而不是在渲染器中。</p><p>Vutron的预加载脚本位于<code>src/preload</code>文件夹中。要创建新的IPC通信通道，请将通道名称添加到以下变量中，将其列入通信白名单。</p><ul><li><code>mainAvailChannels</code>: 从主程序发送事件到渲染程序。 (<code>window.mainApi.send(&#39;channelName&#39;)</code>)</li><li><code>rendererAvailChannels</code>: 将事件从渲染器发送到主程序。 (<code>mainWindow.webContents.send(&#39;channelName&#39;)</code>)</li></ul><p>当从渲染器向主程序发送事件时，应访问<code>window.mainApi</code>对象，而不是<code>ipcRenderer.send</code>。<code>mainApi</code>是您在自己的Vutron模板中设置的名称，可以更改。</p><p>以下是mainApi支持的功能:</p><ul><li><code>send</code>: 将活动发送至主页面。</li><li><code>on</code>: 一个接收主发送事件的听众。</li><li><code>once</code>: 接听主叫方发送的事件。（仅处理一个呼叫）</li><li><code>off</code>: 移除事件监听器</li><li><code>invoke</code>: 可异步发送事件和接收数据的功能。</li></ul><p>要更改和修改此设置，您需要修改 <code>src/preload/index.ts</code> 中的 <code>exposeInMainWorld</code>。</p>',10)]))}const m=o(d,[["render",c]]);export{h as __pageData,m as default};
