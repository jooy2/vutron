import{_ as o,c as t,o as n,ag as r}from"./chunks/framework.BgId8OS5.js";const h=JSON.parse('{"title":"Preload Script","description":"","frontmatter":{},"headers":[],"relativePath":"electron-how-to/preload-script.md","filePath":"en/electron-how-to/preload-script.md","lastUpdated":1725496835000}'),a={name:"electron-how-to/preload-script.md"};function i(d,e,c,l,s,p){return n(),t("div",null,e[0]||(e[0]=[r('<h1 id="preload-script" tabindex="-1">Preload Script <a class="header-anchor" href="#preload-script" aria-label="Permalink to &quot;Preload Script&quot;">â€‹</a></h1><p>The preload script in Electron.js is a secure area designed for communication between the main and renderer processes. It is typically used for <strong><a href="https://www.electronjs.org/docs/latest/tutorial/ipc" target="_blank" rel="noreferrer">IPC communication</a></strong>.</p><p>For more information, see the following articles <a href="https://www.electronjs.org/docs/latest/tutorial/tutorial-preload" target="_blank" rel="noreferrer">https://www.electronjs.org/docs/latest/tutorial/tutorial-preload</a></p><p>For compatibility and security with the latest version of Electron, we do not recommend using the old <code>electron/remote</code> module. If you want to utilize system events or Node scripts, it is recommended to do so in the main process, not the renderer.</p><p>Vutron&#39;s preload script is located in the <code>src/preload</code> folder. To create a new IPC communication channel, add the channel name to the following variable to whitelist it for communication.</p><ul><li><code>mainAvailChannels</code>: Send an event from main to renderer. (<code>window.mainApi.send(&#39;channelName&#39;)</code>)</li><li><code>rendererAvailChannels</code>: Send an event from renderer to main. (<code>mainWindow.webContents.send(&#39;channelName&#39;)</code>)</li></ul><p>When sending events from renderer to main, you access the <code>window.mainApi</code> object instead of <code>ipcRenderer.send</code>. The <code>mainApi</code> is the name you set in your Vutron template and can be changed.</p><p>Here are the supported functions for mainApi:</p><ul><li><code>send</code>: Send an event to main.</li><li><code>on</code>: A listener to receive events sent by main.</li><li><code>once</code>: A listener to receive events sent by main. (Handle only one call)</li><li><code>off</code>: Remove an event listener</li><li><code>invoke</code>: Functions that can send events to main and receive data asynchronously.</li></ul><p>To change and modify this, you need to modify <code>exposeInMainWorld</code> in <code>src/preload/index.ts</code>.</p>',10)]))}const u=o(a,[["render",i]]);export{h as __pageData,u as default};
