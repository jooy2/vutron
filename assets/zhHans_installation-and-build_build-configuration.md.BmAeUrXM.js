import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.BgId8OS5.js";const c=JSON.parse('{"title":"构建配置","description":"","frontmatter":{"order":2},"headers":[],"relativePath":"zhHans/installation-and-build/build-configuration.md","filePath":"zhHans/installation-and-build/build-configuration.md","lastUpdated":1735005729000}'),l={name:"zhHans/installation-and-build/build-configuration.md"};function t(p,s,h,o,d,k){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="构建配置" tabindex="-1">构建配置 <a class="header-anchor" href="#构建配置" aria-label="Permalink to &quot;构建配置&quot;">​</a></h1><p>模块安装完成后，只需执行以下命令即可构建平台软件包。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># For Windows (.exe, .appx)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build:win</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># For macOS (.dmg)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build:mac</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># For Linux (.rpm, .deb, .snap)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build:linux</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># All platform (.exe, .appx, .dmg, .rpm, .deb, .snap) - see below description</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build:all</span></span></code></pre></div><p>已构建的软件包可在 <code>release/{version}</code> 位置找到。</p><p>如需了解更多信息，请参阅以下文章： <a href="https://webpack.electron.build/dependency-management#installing-native-node-modules" target="_blank" rel="noreferrer">https://webpack.electron.build/dependency-management#installing-native-node-modules</a></p><h2 id="多平台构建需要做些什么" tabindex="-1">多平台构建需要做些什么？ <a class="header-anchor" href="#多平台构建需要做些什么" aria-label="Permalink to &quot;多平台构建需要做些什么？&quot;">​</a></h2><p>要为每个操作系统创建软件包，必须在相同的操作系统上构建。例如，macOS 的软件包必须在 macOS 机器上构建。</p><p>不过，你可以在一个操作系统上同时为 Windows、macOS 和 Linux 构建软件包。不过，这可能需要一些准备工作。</p><p>如果想在一个平台上同时构建多个平台，建议使用<strong>macOS</strong>。因为只需几个非常简单的设置就能对其进行配置。</p><p>您可以使用以下命令同时执行多平台构建。或者，你也可以通过上面的单独构建命令，只针对你想要的操作系统进行构建。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build:all</span></span></code></pre></div><p>Linux 构建可能需要 &quot;Multipass&quot; 配置。通过以下链接了解有关 <code>Multipass</code> 的更多信息： <a href="https://multipass.run" target="_blank" rel="noreferrer">https://multipass.run</a></p><p>要了解有关多平台构建的更多信息，请参阅以下文章： <a href="https://electron.build/multi-platform-build" target="_blank" rel="noreferrer">https://electron.build/multi-platform-build</a></p><h2 id="通过排除开发文件减少软件包大小" tabindex="-1">通过排除开发文件减少软件包大小 <a class="header-anchor" href="#通过排除开发文件减少软件包大小" aria-label="Permalink to &quot;通过排除开发文件减少软件包大小&quot;">​</a></h2><p>您可以通过在 <code>buildAssets/builder/config.ts</code> 的 files 属性中添加文件模式，在构建时排除不需要的文件。这将节省捆绑包的容量。</p><p>下面是一个不必要的 <code>node_modules</code> 文件模式，可以进一步节省捆绑包。根据项目情况，使用下面的规则可能会导致问题，因此请在使用前进行审查。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;!**/.*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;!**/node_modules/**/{CONTRIBUTORS,CNAME,AUTHOR,TODO,CONTRIBUTING,COPYING,INSTALL,NEWS,PORTING,Makefile,htdocs,CHANGELOG,ChangeLog,changelog,README,Readme,readme,test,sample,example,demo,composer.json,tsconfig.json,jsdoc.json,tslint.json,typings.json,gulpfile,bower.json,package-lock,Gruntfile,CMakeLists,karma.conf,yarn.lock}*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;!**/node_modules/**/{man,benchmark,node_modules,spec,cmake,browser,vagrant,doxy*,bin,obj,obj.target,example,examples,test,tests,doc,docs,msvc,Xcode,CVS,RCS,SCCS}{,/**/*}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;!**/node_modules/**/*.{conf,png,pc,coffee,txt,spec.js,ts,js.flow,html,def,jst,xml,ico,in,ac,sln,dsp,dsw,cmd,vcproj,vcxproj,vcxproj.filters,pdb,exp,obj,lib,map,md,sh,gypi,gyp,h,cpp,yml,log,tlog,Makefile,mk,c,cc,rc,xcodeproj,xcconfig,d.ts,yaml,hpp}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;!**/node_modules/**/node-v*-x64{,/**/*}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;!**/node_modules/bluebird/js/browser{,/**/*}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;!**/node_modules/bluebird/js/browser{,/**/*}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;!**/node_modules/source-map/dist{,/**/*}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;!**/node_modules/lodash/fp{,/**/*}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;!**/node_modules/async/!(dist|package.json)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;!**/node_modules/async/internal{,/**/*}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;!**/node_modules/ajv/dist{,/**/*}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;!**/node_modules/ajv/scripts{,/**/*}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;!**/node_modules/node-pre-gyp/!(lib|package.json)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;!**/node_modules/node-pre-gyp/lib/!(util|pre-binding.js|node-pre-gyp.js)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;!**/node_modules/node-pre-gyp/lib/util/!(versioning.js|abi_crosswalk.json)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;!**/node_modules/source-map-support/browser-source-map-support.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;!**/node_modules/json-schema/!(package.json|lib)&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h2 id="使用本地-node-模块的项目的构建设置" tabindex="-1">使用本地 Node 模块的项目的构建设置 <a class="header-anchor" href="#使用本地-node-模块的项目的构建设置" aria-label="Permalink to &quot;使用本地 Node 模块的项目的构建设置&quot;">​</a></h2><p>对于使用 <strong>Native Node Module</strong>的项目，请将以下脚本添加到您的 <code>package.json</code>： 安装依赖项时，<code>electron-builder</code> 会处理任何需要重建的模块。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;postinstall&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;electron-builder install-app-deps&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,20)]))}const u=i(l,[["render",t]]);export{c as __pageData,u as default};
