import{_ as r,c as s,o,ag as t}from"./chunks/framework.BgId8OS5.js";const u=JSON.parse('{"title":"Main vs Renderer Process","description":"","frontmatter":{},"headers":[],"relativePath":"electron-how-to/main-and-renderer-process.md","filePath":"en/electron-how-to/main-and-renderer-process.md","lastUpdated":1725496835000}'),n={name:"electron-how-to/main-and-renderer-process.md"};function a(i,e,d,c,p,l){return o(),s("div",null,e[0]||(e[0]=[t(`<h1 id="main-vs-renderer-process" tabindex="-1">Main vs Renderer Process <a class="header-anchor" href="#main-vs-renderer-process" aria-label="Permalink to &quot;Main vs Renderer Process&quot;">​</a></h1><p>A <strong>Vutron</strong> application is divided into code into a Main process and a Renderer process.</p><p><strong>&quot;Main&quot;</strong> is the code of <code>src/main</code> and is mainly the process code handled by Electron. <strong>&quot;Renderer&quot;</strong> is the code of <code>src/renderer</code>, mainly for front-end rendering process like Vue.</p><p>In general, <strong>Node.js</strong> scripts cannot be run in the renderer process. Examples include modules that contain APIs used by Node.js, or native modules of <strong>Node.js</strong> such as <code>path</code> or <code>net</code>, <code>os</code> or <code>crypto</code>.</p><p>Preload scripts are run before the renderer is loaded. It creates a bridge to the main process to keep the execution of Node.js scripts in the renderer area separate and isolated for security reasons.</p><p>For secure script execution, it is recommended that the main process executes the Node scripts, and the renderer receives the execution results via messaging. This can be implemented via <strong>IPC communication</strong>.</p><p>For more information on this, see the following articles: <a href="https://www.electronjs.org/docs/latest/tutorial/ipc" target="_blank" rel="noreferrer">https://www.electronjs.org/docs/latest/tutorial/ipc</a></p><h3 id="how-to-run-node-js-on-a-renderer" tabindex="-1">How to run Node.js on a renderer? <a class="header-anchor" href="#how-to-run-node-js-on-a-renderer" aria-label="Permalink to &quot;How to run Node.js on a renderer?&quot;">​</a></h3><p>If you want to skip the security issues and use Node.js scripts in your renderer, you need to set <code>nodeIntegration</code> to <code>true</code> in your <code>vite.config.ts</code> file.</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rendererPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  nodeIntegration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>For more information on this, see the following articles: <a href="https://github.com/electron-vite/vite-plugin-electron-renderer" target="_blank" rel="noreferrer">https://github.com/electron-vite/vite-plugin-electron-renderer</a></p>`,11)]))}const g=r(n,[["render",a]]);export{u as __pageData,g as default};
