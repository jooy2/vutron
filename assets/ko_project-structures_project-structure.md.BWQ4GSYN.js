import{_ as n,c as a,o as p,ag as e}from"./chunks/framework.BgId8OS5.js";const g=JSON.parse('{"title":"프로젝트 구조","description":"","frontmatter":{"order":1},"headers":[],"relativePath":"ko/project-structures/project-structure.md","filePath":"ko/project-structures/project-structure.md","lastUpdated":1754904239000}'),l={name:"ko/project-structures/project-structure.md"};function i(t,s,c,r,o,u){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="프로젝트-구조" tabindex="-1">프로젝트 구조 <a class="header-anchor" href="#프로젝트-구조" aria-label="Permalink to &quot;프로젝트 구조&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/</span></span>
<span class="line"><span>├─ .github - GitHub 파일들 (Vutron 프로젝트 기여에만 사용)</span></span>
<span class="line"><span>│  └─ ISSUE_TEMPLATE/</span></span>
<span class="line"><span>│  └─ resources/ - README.md 등에 사용되는 GitHub 리소스</span></span>
<span class="line"><span>│  └─ workflows/ - GitHub 워크플로우 정의</span></span>
<span class="line"><span>│  └─ dependabot.yml</span></span>
<span class="line"><span>│  └─ FUNDING.yml</span></span>
<span class="line"><span>├─ .vscode - Visual Studio Code IDE에서 사용하는 일반적인 프로젝트 구성 파일</span></span>
<span class="line"><span>├─ buildAssets/ - Electron 빌드에 사용되는 패키지 리소스(아이콘, 로고 등) 파일</span></span>
<span class="line"><span>│  └─ builder/</span></span>
<span class="line"><span>│  │  │  └─ config.ts - \`electron-builder\` 동적 구성 파일</span></span>
<span class="line"><span>│  └─ icons/</span></span>
<span class="line"><span>├─ dist/ - 패키지 빌드에 사용되는 출력 디렉토리</span></span>
<span class="line"><span>├─ docs/ - 프로젝트 문서(선택적으로 활성화)</span></span>
<span class="line"><span>│  └─ .vitepress/</span></span>
<span class="line"><span>│  │  │  └─ config.mts - 문서 호스팅에 사용되는 VitePress 구성 파일</span></span>
<span class="line"><span>│  └─ public/ - VitePress 문서 페이지의 루트 리소스 디렉토리</span></span>
<span class="line"><span>├─ node_modules/</span></span>
<span class="line"><span>├─ src/</span></span>
<span class="line"><span>│  ├─ main/ - 메인(Electron) 프로세스 소스 코드</span></span>
<span class="line"><span>│  │  ├─ utils/ - 메인 프로세스 유틸리티</span></span>
<span class="line"><span>│  │  │  └─ Constants.ts - 메인 글로벌 정의</span></span>
<span class="line"><span>│  │  │  └─ Menus.ts - 메인 글로벌 메뉴 정의</span></span>
<span class="line"><span>│  │  └─ index.ts - 메인 프로세스 진입점</span></span>
<span class="line"><span>│  │  └─ IPCs.ts - 메인 프로세스 IPC 핸들러 정의</span></span>
<span class="line"><span>│  │  └─ MainRunner.ts - 메인 프로세스 메인 윈도우 프로세스</span></span>
<span class="line"><span>│  ├─ preload/ - 프리로드 (Electron-Vue 커뮤니케이션 브릿지) 프로세스</span></span>
<span class="line"><span>│  │  └─ index.ts</span></span>
<span class="line"><span>│  ├─ public/ - Main + Renderer 정적 리소스</span></span>
<span class="line"><span>│  │  └─ images/</span></span>
<span class="line"><span>│  ├─ renderer/ - 렌더러 (Vue) 프로세스 소스 코드</span></span>
<span class="line"><span>│  │  ├─ components/ - Vue 컴포넌트 콜렉션</span></span>
<span class="line"><span>│  │  │  └─ layout/ - 레이아웃 컴포넌트</span></span>
<span class="line"><span>│  │  ├─ locales/ - Vue i18n 언어 리소스 파일</span></span>
<span class="line"><span>│  │  ├─ plugins/ - Vue 플러그인 정의</span></span>
<span class="line"><span>│  │  ├─ router/ - Vue 라우팅 정의</span></span>
<span class="line"><span>│  │  ├─ screens/ - Vue 화면 컴포넌트</span></span>
<span class="line"><span>│  │  │  └─ ErrorScreen.vue - 렌더링 프로세스 및 라우팅 오류 발생 시 표시되는 화면</span></span>
<span class="line"><span>│  │  │  └─ MainScreen.vue</span></span>
<span class="line"><span>│  │  │  └─ SecondScreen.vue - 샘플 화면</span></span>
<span class="line"><span>│  │  ├─ store/ - Pinia 스토어 (글로벌 상태 관리) 정의</span></span>
<span class="line"><span>│  │  ├─ utils/ - 렌더러 프로세스 유틸리티</span></span>
<span class="line"><span>│  │  ├─ App.vue - Vue 앱 루트 컴포넌트</span></span>
<span class="line"><span>│  │  ├─ index.html - Electron 렌더러 프로세스에 의해 로드된 루트 정적 인덱스</span></span>
<span class="line"><span>│  └─ └─ main.ts - 렌더러 프로세스 엔트리 포인트</span></span>
<span class="line"><span>├─ tests/ - 애플리케이션 테스트 구성</span></span>
<span class="line"><span>│  ├─ results/ - PlayWright 테스트 결과 파일 및 스크린샷 저장 위치</span></span>
<span class="line"><span>│  ├─ specs/ - PlayWright 테스트 사양 파일</span></span>
<span class="line"><span>│  ├─ fixtures.ts - 공통 실행 API 테스트</span></span>
<span class="line"><span>│  └─ testUtil.ts - 테스트 유틸리티</span></span>
<span class="line"><span>├─ .editorconfig - IDE용 에디터 권장 구성 파일</span></span>
<span class="line"><span>├─ .eslintignore - ESLint에서 무시할 파일 목록</span></span>
<span class="line"><span>├─ .gitignore - Git에 업로드하지 않을 파일 목록</span></span>
<span class="line"><span>├─ .prettierignore - Prettier 파일 서식을 비활성화할 파일 목록</span></span>
<span class="line"><span>├─ .prettierrc - Prettier 규칙 설정</span></span>
<span class="line"><span>├─ CODE_OF_CONDUCT.md - GitHub에서만 사용되는 파일</span></span>
<span class="line"><span>├─ eslint.config.ts - ESLint 규칙 구성</span></span>
<span class="line"><span>├─ LICENSE - 프로젝트 라이선스 파일</span></span>
<span class="line"><span>├─ package.json - Node.js 패키지 구성</span></span>
<span class="line"><span>├─ package-lock.json</span></span>
<span class="line"><span>├─ playwright.config.ts - Playwright 테스트 규칙 구성</span></span>
<span class="line"><span>├─ pnpm-lock.yaml - PNPM 관련 파일</span></span>
<span class="line"><span>├─ pnpm-workspace.yaml - PNPM 관련 파일</span></span>
<span class="line"><span>├─ tsconfig.json - TypeScript 설정</span></span>
<span class="line"><span>├─ tsconfig.node.json - TypeScript 설정</span></span>
<span class="line"><span>├─ vite.config.mts - Vite 컴파일러 빌드 설정</span></span>
<span class="line"><span>└─ README.md - GitHub에서만 사용되는 파일</span></span></code></pre></div>`,2)]))}const m=n(l,[["render",i]]);export{g as __pageData,m as default};
