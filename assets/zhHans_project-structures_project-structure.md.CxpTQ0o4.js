import{_ as n,c as a,o as p,ag as e}from"./chunks/framework.BgId8OS5.js";const m=JSON.parse('{"title":"项目结构","description":"","frontmatter":{"order":1},"headers":[],"relativePath":"zhHans/project-structures/project-structure.md","filePath":"zhHans/project-structures/project-structure.md","lastUpdated":1746665143000}'),l={name:"zhHans/project-structures/project-structure.md"};function i(c,s,t,r,o,u){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-label="Permalink to &quot;项目结构&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/</span></span>
<span class="line"><span>├─ .github - GitHub文件（仅用于Vutron GitHub项目贡献）</span></span>
<span class="line"><span>│  └─ ISSUE_TEMPLATE/</span></span>
<span class="line"><span>│  └─ resources/ - 用于自述文件（README.md）等的GitHub资源。</span></span>
<span class="line"><span>│  └─ workflows/ - GitHub工作流程定义</span></span>
<span class="line"><span>│  └─ dependabot.yml</span></span>
<span class="line"><span>│  └─ FUNDING.yml</span></span>
<span class="line"><span>├─ .vscode - Visual Studio Code IDE使用的通用项目配置文件</span></span>
<span class="line"><span>├─ buildAssets/ - 用于Electron构建的资源包（图标、徽标等）文件</span></span>
<span class="line"><span>│  └─ builder/</span></span>
<span class="line"><span>│  │  │  └─ config.ts - \`electron-builder\`动态配置文件</span></span>
<span class="line"><span>│  └─ icons/</span></span>
<span class="line"><span>├─ dist/ - 用于生成软件包的输出目录</span></span>
<span class="line"><span>├─ docs/ - 项目文件（可选）</span></span>
<span class="line"><span>│  └─ .vitepress/</span></span>
<span class="line"><span>│  │  │  └─ config.mts - 用于文档托管的VitePress配置文件</span></span>
<span class="line"><span>│  └─ public/ - VitePress文档页面的根目录</span></span>
<span class="line"><span>├─ node_modules/</span></span>
<span class="line"><span>├─ src/</span></span>
<span class="line"><span>│  ├─ main/ - 主（电子）处理源代码</span></span>
<span class="line"><span>│  │  ├─ utils/ - 主要工艺设备</span></span>
<span class="line"><span>│  │  │  └─ Constants.ts - 全球主要定义</span></span>
<span class="line"><span>│  │  │  └─ Menus.ts - 全球主菜单定义</span></span>
<span class="line"><span>│  │  └─ index.ts - 主要流程入口</span></span>
<span class="line"><span>│  │  └─ IPCs.ts - 主要流程 ipc 处理程序定义</span></span>
<span class="line"><span>│  │  └─ MainRunner.ts - 主流程主窗口处理</span></span>
<span class="line"><span>│  ├─ preload/ - 预加载（Electron-Vue通信桥）过程源代码</span></span>
<span class="line"><span>│  │  └─ index.ts</span></span>
<span class="line"><span>│  ├─ public/ - Main + Renderer静态资源</span></span>
<span class="line"><span>│  │  └─ images/</span></span>
<span class="line"><span>│  ├─ renderer/ - 渲染器（Vue）处理源代码</span></span>
<span class="line"><span>│  │  ├─ components/ - Vue组件集合</span></span>
<span class="line"><span>│  │  │  └─ layout/ - 布局组件</span></span>
<span class="line"><span>│  │  ├─ locales/ - Vue i18n 语言资源文件</span></span>
<span class="line"><span>│  │  ├─ plugins/ - Vue插件定义</span></span>
<span class="line"><span>│  │  ├─ router/ - 视图路由定义</span></span>
<span class="line"><span>│  │  ├─ screens/ - 屏幕组件</span></span>
<span class="line"><span>│  │  │  └─ ErrorScreen.vue - 当渲染程序出现错误时，屏幕上会显示错误信息</span></span>
<span class="line"><span>│  │  │  └─ MainScreen.vue</span></span>
<span class="line"><span>│  │  │  └─ SecondScreen.vue - 屏幕截图</span></span>
<span class="line"><span>│  │  ├─ store/ - Pinia商店（全球状态管理）定义</span></span>
<span class="line"><span>│  │  ├─ utils/ - 渲染器进程实用程序</span></span>
<span class="line"><span>│  │  ├─ App.vue - Vue应用程序的根组件</span></span>
<span class="line"><span>│  │  ├─ index.html - 由电子渲染器进程加载的根静态索引</span></span>
<span class="line"><span>│  └─ └─ main.ts - 渲染器进程入口点</span></span>
<span class="line"><span>├─ tests/ - 应用程序测试配置</span></span>
<span class="line"><span>│  ├─ results/ - PlayWright测试结果文件和屏幕截图的保存位置</span></span>
<span class="line"><span>│  ├─ specs/ - PlayWright测试规格文件</span></span>
<span class="line"><span>│  ├─ fixtures.ts - 测试公共执行API</span></span>
<span class="line"><span>│  └─ testUtil.ts - 测试实用程序</span></span>
<span class="line"><span>├─ .editorconfig - 编辑器推荐的IDE配置文件</span></span>
<span class="line"><span>├─ .eslintignore - ESLint忽略的文件列表</span></span>
<span class="line"><span>├─ .gitignore - 不上传到Git的文件列表</span></span>
<span class="line"><span>├─ .prettierignore - 要禁用的文件列表 更美观的文件格式</span></span>
<span class="line"><span>├─ .prettierrc - 更漂亮的规则配置</span></span>
<span class="line"><span>├─ CODE_OF_CONDUCT.md - 仅在GitHub上使用的文件</span></span>
<span class="line"><span>├─ eslint.config.ts - ESLint规则配置</span></span>
<span class="line"><span>├─ LICENSE - 项目许可证文件</span></span>
<span class="line"><span>├─ package.json - Node.js 包配置</span></span>
<span class="line"><span>├─ package-lock.json</span></span>
<span class="line"><span>├─ playwright.config.ts - 编剧测试规则配置</span></span>
<span class="line"><span>├─ pnpm-lock.yaml - PNPM 相关文件</span></span>
<span class="line"><span>├─ pnpm-workspace.yaml - PNPM 相关文件</span></span>
<span class="line"><span>├─ tsconfig.json - TypeScript配置</span></span>
<span class="line"><span>├─ tsconfig.node.json - TypeScript配置</span></span>
<span class="line"><span>├─ vite.config.mts - Vite编译器构建配置</span></span>
<span class="line"><span>└─ README.md - 仅在GitHub上使用的文件</span></span></code></pre></div>`,2)]))}const g=n(l,[["render",i]]);export{m as __pageData,g as default};
